{
    TMS9918 Emulation
    PAL / NTSC Video Driver by Chip Gracey
    Tweakes and VDP Emulation by Marco Maccaferri <macca@maccasoft.com>
}
CON

    x_pixels    = 256
    y_pixels    = 192

    x_tweak     = 0
    y_tweak     = 0

VAR

    byte  status

PUB start(pal, tms_regs, tms_vram, bitmap, pin) | x_total, dotf, dotps, i

    x_total := pal ? 416 : 378
    dotf := muldiv64(x_total, pal ? pal_cf * 4 * 128 : ntsc_cf * 4 * 128, pal ? pal_cc : ntsc_cc) 'compute pixel clock * 128
    dotps := muldiv64(1_000_000, 128_000_000, dotf)     'compute ps per pixel clock

    debug(udec(dotf,dotps))

    _md := pal << 2 '| interlaced << 1                  'set modal data
    _cb := pal ? pal_cb : ntsc_cb
    _cy := pal ? pal_cy : ntsc_cy
    _ci := pal ? pal_ci : ntsc_ci
    _cq := pal ? pal_cq : ntsc_cq
    _ca := pal ? pal_ca : ntsc_cq
    _cf := (pal ? pal_cf : ntsc_cf) frac clkfreq

    i := 31 - encod clkfreq                             'compute very accurate streamer frequency to stop dot-crawl
    _xf := ((dotf >> (7-i)) frac (clkfreq << i) + 1) >> 1

    debug(udec(i),ubin_long(clkfreq))

    _bs := (pal ? pal_bs : ntsc_bs)                     'compute horizontal sync timing
    _ds := (pal ? pal_ds : ntsc_ds) + _bs
    _bc := (pal ? pal_bc : ntsc_bc) + _ds
    _dc := (pal ? pal_dc : ntsc_dc) + _bc
    _ac := (pal ? pal_ac : ntsc_ac) + _dc

    _bs := (_bs << 1 / dotps + 1) >> 1
    _ds := (_ds << 1 / dotps + 1) >> 1 - _bs
    _bc := (_bc << 1 / dotps + 1) >> 1 - _bs - _ds
    _dc := (_dc << 1 / dotps + 1) >> 1 - _bs - _ds - _bc
    _ac := (_ac << 1 / dotps + 1) >> 1 - _bs - _ds - _bc - _dc

    i  := _bs + _ds + _bc + _dc + _ac                   'compute visible timing
    _bv := (x_total - x_pixels - i) / 2 + x_tweak
    _dv := x_pixels
    _av := x_total - x_pixels - i - _bv
    _db := _bv + _dv + _av

    debug(udec(_bv, _dv, _av, i))

    _hf := x_total / 2                                  'compute vertical sync timing
    _hl := ((pal ? pal_hl : ntsc_hl) << 1 / dotps + 1) >> 1
    _hh := _hf - _hl - _bs
    _ll := ((pal ? pal_ll : ntsc_ll) << 1 / dotps + 1) >> 1
    _lh := _hf - _ll - _bs
    _vs := pal ? pal_vs : ntsc_vs

    repeat i from @_bs to @_lh step 4                   'turn bs..lh into streamer commands
        long[i] |= i == @_dv ? $7F08_0000 : $7F01_0000
    _bv := (_bv & $FFFF) | $3F00_0000   'overrides
    _av := (_av & $FFFF) | $3F00_0000
    _bb := (_db & $FFFF) | $3F00_0000

    i  := pal ? pal_dl : ntsc_dl                          'compute vertical lines
    _bl := (i - y_pixels) / 2 + y_tweak
    _al := i - y_pixels - _bl
    _bl += pal ? 18 : 10                                  '+10 for ntsc

    debug(udec(_bl, y_pixels, _al, i))

    _pn := pin

    _tms_status := @status
    _tms_regs := tms_regs
    _tms_vram := tms_vram
    _tms_first := _bl
    _tms_last := _tms_first + 192
    _tms_bitmap := bitmap
    _tms_palette := @tms_palette

    coginit(16, @driver, 0)

PUB get_status() : rc

    rc := status
    status := 0

DAT             orgh

tms_palette     long    $00_00_00_00
                long    $00_00_00_00
                long    $20_C0_20_00
                long    $60_E0_60_00
                long    $20_20_E0_00
                long    $40_60_E0_00
                long    $A0_20_20_00
                long    $40_C0_E0_00
                long    $E0_20_20_00
                long    $E0_60_60_00
                long    $C0_C0_20_00
                long    $C0_C0_80_00
                long    $20_80_20_00
                long    $C0_40_A0_00
                long    $A0_A0_A0_00
                long    $E0_E0_E0_00

DAT             org
'
' Driver
'
driver
                setq2   #$10 - 1                'load palette into lut
                rdlong  0,_tms_palette

                setcmod #%11_1_0000             'set colorspace converter to YIQ mode (composite)
                setcy   _cy                     'set colorspace converter y coefficients
                setci   _ci                     'set colorspace converter i coefficients
                setcfrq _cf                     'set colorspace converter frequency
                setxfrq _xf                     'set transfer frequency

                cogid   cx                      'install cogid into dacmode
                setnib  dacmode,cx,#2
                wrpin   dacmode,_pn             'enable dac mode in pin(s)
                drvl    _pn                     'enable dac output(s)

                mov     ijmp1,#field            'set up streamer-empty interrupt
                setint1 #10

                mov     scol, #0
                xcont   #10,#0                  'do streamer instruction to start interrupt sequence
'
'
' Main program
'
loop
                cmp     _cl, scnt        wcz
    if_z        jmp     #loop

                mov     scol, scol+1

                mov     ptra, _tms_regs

                rdbyte  regs+7, ptra[7]
                mov     a, regs+7
                and     a, #$0F
                movbyts a, #0
                mov     scol+1, a

                mov     scnt, _cl

                cmp     _cl, _tms_first  wcz   ' wait for frame sync
    if_c        jmp     #loop
                cmp     _cl, _tms_last   wc
    if_nc       jmp     #loop
    if_nz       jmp     #scanline

                setq    #1                      ' read regs into temp buffer
                rdlong  sbuf, _tms_regs         ' |

                getbyte regs+0, sbuf, #0
                test    regs+0, #TMSMODE3    wz ' graphics mode II
                getbyte regs+1, sbuf, #1
                getbyte regs+2, sbuf, #2
                shl     regs+2, #10             ' name table base address * $400
                add     regs+2, _tms_vram
                getbyte regs+3, sbuf, #3
                shl     regs+3, #6              ' color table base address * $40
    if_nz       andn    regs+3, vdp_8k_mask     ' limit color table to 8k boundaries
                add     regs+3, _tms_vram
                getbyte regs+4, sbuf+1, #0
                shl     regs+4, #11             ' pattern generator base address * $800
    if_nz       andn    regs+4, vdp_8k_mask     ' limit pattern table to 8k boundaries
                add     regs+4, _tms_vram
                getbyte regs+5, sbuf+1, #1
                shl     regs+5, #7              ' sprite attribute table base address * $80
                add     regs+5, _tms_vram
                getbyte regs+6, sbuf+1, #2
                shl     regs+6, #11             ' sprite pattern generator base address * $800
                add     regs+6, _tms_vram
                getbyte regs+7, sbuf+1, #3

                setq    #32-1                   ' read all sprite attribute table
                rdlong  sbuf, regs+5

                mov     loff, #0
                mov     lcnt, #0
                mov     ptrv, _tms_bitmap

scanline
                mov     ptra, ptrv

                test    regs+1, #TMSMODE2    wz ' multicolor mode
    if_nz       jmp     #multicolor_mode

                test    regs+1, #TMSMODE1    wz ' text mode
    if_z        jmp     #graphics_mode

text_mode
                mov     ctmp, regs+7            ' background color
                and     ctmp, #$0F
                mov     a, regs+7               ' foreground color
                shr     a, #4
                setbyte ctmp, a, #1

                mov     cbuf+0, ctmp
                movbyts cbuf+0, #0
                wrlong  cbuf+0, ptra++
                wrlong  cbuf+0, ptra++

                mov     ptrb, regs+2

                mov     ecnt, #40
.loop           rdbyte  ptrc, ptrb++            ' read tile number to display
                shl     ptrc, #3                ' 8 bytes per tile
                add     ptrc, regs+4
                add     ptrc, loff
                rdbyte  a, ptrc                 ' pixels, 1 bit per pixel, from msb

                rev     a
                shr     a, #24
                mergew  a
                mov     cbuf+0, ctmp
                movbyts cbuf+0, a
                shr     a, #8
                mov     cbuf+1, ctmp
                movbyts cbuf+1, a

                setq    #1
                wrlong  cbuf+0, ptra++
                sub     ptra, #2

                djnz    ecnt, #.loop

                mov     cbuf+0, ctmp
                movbyts cbuf+0, #0
                wrlong  cbuf+0, ptra++
                wrlong  cbuf+0, ptra++

                cmp     loff, #7        wz
    if_z        add     regs+2, #40

                jmp     #end_scanline

multicolor_mode
                mov     a, lcnt
                shr     a, #2
                and     a, #$07

                mov     ptrb, regs+2

                mov     ecnt, #32
.loop           rdbyte  ptrc, ptrb++            ' read tile number to display
                shl     ptrc, #3
                add     ptrc, regs+4            ' points to color table
                add     ptrc, a

                rdbyte  cbuf+0, ptrc            ' colors

                mov     cbuf+1, cbuf+0
                and     cbuf+1, #$0F wz
    if_z        setnib  cbuf+1, regs+7, #0
                shr     cbuf+0, #4   wz
    if_z        setnib  cbuf+0, regs+7, #0

                movbyts cbuf+0, #%%0000
                movbyts cbuf+1, #%%0000

                setq    #1
                wrlong  cbuf+0, ptra++

                djnz    ecnt, #.loop

                cmp     loff, #7        wz
    if_z        add     regs+2, #32

                jmp     #sprites

graphics_mode
                test    regs+0, #TMSMODE3    wz ' graphics mode II
    if_nz       mov     a, lcnt
    if_nz       shr     a, #6                   ' divide by 64 (8 rows by 8 pixels)
    if_nz       shl     a, #11                  ' multiply by 2048
                mov     b, loff                 ' offset into pattern table
    if_nz       add     b, a                    ' add mode II pattern table offset

                test    regs+0, #TMSMODE3 wz    ' graphics mode II
                bitnz   .shlr, #21              ' patch shl(0)/shr(1)

                mov     ptrb, regs+2

                mov     ecnt, #32
.loop           rdbyte  ptrc, ptrb++            ' read tile number to display

                mov     ptrd, ptrc
.shlr           shl     ptrd, #3
                add     ptrd, regs+3            ' points to color table
                add     ptrd, b
                rdbyte  a, ptrd                 ' colors

                getnib  cbuf+0, a, #0
                and     cbuf+0, #$0F wz
    if_z        setnib  cbuf+0, regs+7, #0
                getnib  cbuf+1, a, #1
                and     cbuf+1, #$0F wz
    if_z        setnib  cbuf+1, regs+7, #0

                setbyte cbuf+0, cbuf+1, #1
                mov     cbuf+1, cbuf+0

                shl     ptrc, #3                ' 8 bytes per tile
                add     ptrc, regs+4
                add     ptrc, b
                rdbyte  a, ptrc                 ' pixels, 1 bit per pixel, from msb

                rev     a
                shr     a, #24
                mergew  a
                movbyts cbuf+0, a
                shr     a, #8
                movbyts cbuf+1, a

                setq    #1
                wrlong  cbuf+0, ptra++

                djnz    ecnt, #.loop

                cmp     loff, #7        wz
    if_z        add     regs+2, #32

                ' fall through

sprites
                mov     vcnt, #4                ' sprite scanline limit
                mov     ccnt, #TMSSPRITES       ' number of sprites

                rdbyte  stat, _tms_status

                mov     line-1, #0              ' clear collision buffer
                mov     line+0, #0
                mov     line+1, #0
                mov     line+2, #0
                mov     line+3, #0
                mov     line+4, #0
                mov     line+5, #0
                mov     line+6, #0
                mov     line+7, #0
                mov     line+8, #0

                sets    .loop, #sbuf

                mov     b, #8
                test    regs+1, #TMSSPRSIZE wz
    if_nz       shl     b, #1
                test    regs+1, #TMSSPRMAG  wz
    if_nz       shl     b, #1

.loop           mov     sprt, sbuf
                add     .loop, #1

                test    sprt, TMSSPRCOLOR wz    ' check sprite color
    if_z        jmp     #.next                  ' skip if transparent

                mov     y, sprt
                shl     y, #24
                sar     y, #24                  ' sign-extend y
                cmps    y, neg_clip wc
    if_c        and     y, #$FF                 ' max -32
                cmp     y, #$D0 wz              ' end of sprites processing
    if_z        jmp     #end_scanline

                mov     a, lcnt                 ' check sprite scanline visibility
                subs    a, y    wc
    if_c        jmp     #.next
                cmp     a, b    wc
    if_nc       jmp     #.next

                getbyte ptrc, sprt, #2
                shl     ptrc, #3
                add     ptrc, regs+6
                test    regs+1, #TMSSPRMAG  wz
    if_nz       shr     a, #1
                add     ptrc, a

                getbyte ctmp, sprt, #3
                and     ctmp, #$0F          wz
    if_z        setnib  ctmp, regs+7, #0

                getbyte x, sprt, #1
                test    sprt, TMSEARLYCLK   wz
    if_nz       sub     x, #32
                mov     ptra, ptrv
                add     ptra, x

                test    regs+1, #TMSSPRSIZE wz
    if_z        mov     ecnt, #4
    if_nz       mov     ecnt, #8

                rdbyte  sprt, ptrc
                shl     sprt, #8
    if_nz       add     ptrc, #16
    if_nz       rdbyte  a, ptrc
    if_nz       or      sprt, a

                test    regs+1, #TMSSPRMAG  wz
    if_nz       setword sprt, sprt, #1
    if_nz       mergew  sprt
    if_z        shl     sprt, #16

                mov     cbuf, sprt
                mov     cbuf+1, cbuf

                mov     y, x                    ' check sprite collision
                sar     y, #5                   ' |
                add     y, #line                ' |
                setd    .c0, y                  ' |
                setd    .c0+1, y                ' |
                add     y, #1                   ' |
                setd    .c1, y                  ' |
                setd    .c1+1, y                ' |
                mov     a, x                    ' |
                and     a, #$1F     wz          ' |
    if_z        mov     cbuf+1, #0              ' |
                shr     cbuf, a                 ' |
.c0             test    0-0, cbuf   wz          ' |
                or      0-0, cbuf               ' |
                mov     y, #32                  ' |
                sub     y, a                    ' |
                shl     cbuf+1,y                ' |
.c1 if_z        test    0-0, cbuf+1 wz          ' |
                or      0-0, cbuf+1             ' |
    if_nz       or      stat, #%0010_0000       ' update collision flag

                cmps    x, #0       wc
    if_c        abs     x
    if_c        add     ptra, x
    if_c        sub     ecnt, x
    if_c        shl     sprt, x
    if_c        mov     x, #0

                shl     ctmp, #8
                rev     sprt

.draw           getnib  a, sprt, #0
                mergew  a
                mov     cbuf+0, ctmp
                movbyts cbuf+0, a
                wmlong  cbuf+0, ptra++
                add     x, #4
                cmp     x, #256     wc
                shr     sprt, #4    wz
    if_c_and_nz djnz    ecnt, #.draw

                sub     vcnt, #1    wz          ' limit sprites on scanline
    if_z        jmp     #end_scanline

.next           djnz    ccnt, #.loop

                wrbyte  stat, _tms_status

end_scanline
                add     ptrv, #256
                incmod  loff, #7
                incmod  lcnt, #192-1
                jmp     #loop
'
'
' Field loop
'
' _md   00x     NTSC non-interlaced:    7H, 6L, 6H, half, B(10), F0(243)
'       010     NTSC interlaced field0: 6H, 6L, 6H, B(10), F0(243)
'       011     NTSC interlaced field1: 7H, 6L, 6H, half, B(10), F1(243)
'       10x     PAL non-interlaced:     6H, 5L, 5H, half, B(16), F0(288)
'       110     PAL interlaced field0:  5H, 5L, 5H, half, B(16), F0(288)
'       111     PAL interlaced field1:  6H, 5L, 5H, B(17), F1(288)
'
field
                mov     cx,_bl                  'before-visible blank lines (already +10 for ntsc)
top             xcont   _bs, #1                 'horizontal sync
                add     _cl, #1
                resi1
                xcont   _ds, #2
                resi1
                xcont   _bc, #1
                resi1
                xcont   _dc, _cb

                bitnot  _md, #31        wcz     'for pal, alternate phase each line
   if_nc        setcq   _cq
   if_c         setcq   _ca

                resi1
                xcont   _ac, #1

                resi1
                cmp     _cl, #16       wcz
   if_c         xcont   _db, #1
   if_nc        xcont   _bb, scol

                resi1
                djnz    cx, #top

                mov     cx, #0                  'visible lines
                rdfast  #0, _tms_bitmap         'start reading pixels into fifo

.line           xcont   _bs, #1                 'horizontal sync
                add     _cl, #1
                resi1
                xcont   _ds, #2
                resi1
                xcont   _bc, #1
                resi1
                xcont   _dc, _cb

                bitnot  _md, #31        wcz     'for pal, alternate phase each line
   if_nc        setcq   _cq
   if_c         setcq   _ca

                resi1
                xcont   _ac, #1

                resi1
                xcont   _bv, scol          'before-visible spacer
                resi1
                xcont   _dv, #0                 'visible line
                resi1
                xcont   _av, scol          'after-visible spacer
                resi1

                incmod  cx, #y_pixels-1 wc      'another line?
        if_nc   jmp     #.line

                mov     cx, _al         wz      'after-visible blank lines
bottom          xcont   _bs, #1                 'horizontal sync
                add     _cl, #1
                resi1
                xcont   _ds, #2
                resi1
                xcont   _bc, #1
                resi1
                xcont   _dc, _cb

                bitnot  _md, #31        wcz     'for pal, alternate phase each line
   if_nc        setcq   _cq
   if_c         setcq   _ca

                resi1
                xcont   _ac, #1

                resi1
                xcont   _bb, scol
                resi1

                djnz    cx, #bottom

                drvnot  #1
                cogatn  #%00000001              'signal vertical sync to cog0

                test    _md, #%010      wc      'toggle field?
        if_c    xor     _md, #%001

                decod   cy,_md                  'initial high vertical syncs
                test    cy,#%1000_1001  wc      'if ntsc/non-interlaced or field1, add 1
                addx    cx,_vs
vhigh           xcont   _bs,#1
                resi1
                xcont   _hl,#2
                resi1
                xcont   _hh,#1
                resi1
                djnz    cx,#vhigh

                mov     cx,_vs                  'low vertical syncs
vlow            xcont   _bs,#1
                resi1
                xcont   _ll,#2
                resi1
                xcont   _lh,#1
                resi1
                djnz    cx,#vlow

                mov     _cl, #0

                mov     cx,_vs                  'final high vertical syncs
vhigh2          xcont   _bs,#1
                resi1
                xcont   _hl,#2
                resi1
                xcont   _hh,#1
                resi1
                djnz    cx,#vhigh2

                test    cy,#%0101_1001  wc      'if ntsc/non-interlaced/field0 or ntsc/interlaced/field1 or pal/field0, do half line
    if_c        xcont   _hf,#1

                jmp     #field                  'loop
'
'
' Data
'
dacmode         long    p_dac_75r_2v+p_channel  '%0000_0000_000_101110000xxxx_01_00000_0

cx              long    0
cy              long    0

_md             long    0       'mode (bits 2/1/0 : pal/interlace/field)
_cb             long    0       'colorburst reference color
_cy             long    0       'colorspace y coefficients
_ci             long    0       'colorspace i coefficients
_cq             long    0       'colorspace q coefficients
_ca             long    0       'colorspace q coefficients, alt for pal
_cf             long    0       'colorspace frequency setting
_xf             long    0       'streamer frequency setting
_bs             long    0       'streamer command: before-sync
_ds             long    0       'streamer command: during-sync
_bc             long    0       'streamer command: before-colorburst
_dc             long    0       'streamer command: during-colorburst
_ac             long    0       'streamer command: after-colorburst
_bv             long    0       'streamer command: before-visible
_dv             long    0       'streamer command: during-visible
_av             long    0       'streamer command: after-visible
_db             long    0       'streamer command: during-blank
_bb             long    0       'streamer command: during-border
_hf             long    0       'streamer command: half-line
_hl             long    0       'streamer command: high-vsync-low
_hh             long    0       'streamer command: high-vsync-high
_ll             long    0       'streamer command: low-vsync-low
_lh             long    0       'streamer command: low-vsync-high
_vs             long    0       'vertical sync pulses
_ml             long    0       'mandatory blank lines
_rl             long    0       'retrace lines
_bl             long    0       'before-visible lines
_al             long    0       'after-visible lines
_cl             long    0       'current line
_pn             long    0       'pin(s)

_tms_status     long    0
_tms_regs       long    0
_tms_vram       long    0
_tms_first      long    0
_tms_last       long    0
_tms_bitmap     long    0
_tms_palette    long    0

vdp_8k_mask     long    $1FFF
neg_clip        long    -32

TMSEARLYCLK     long    %10000000_00000000_00000000_00000000
TMSSPRCOLOR     long    %00001111_00000000_00000000_00000000

a               res     1
b               res     1
x               res     1
y               res     1

scnt            res     1
scol            res     2       'backdrop/border color

lcnt            res     1
loff            res     1
ccnt            res     1
vcnt            res     1
ecnt            res     1

ctmp            res     1
cbuf            res     4
sprt            res     1

ptrc            res     1
ptrd            res     1
ptrv            res     1

stat            res     1
regs            res     8
sbuf            res     32
                res     1
line            res     8
                res     1

                fit     $1F0

CON

    TMSMODE3   = %00000010      ' mode bit 3
    TMSEXTVID  = %00000001      ' external video

    ' register 1 control bits
    TMS4K16K   = %10000000      ' 4/16K RAM
    TMSBLANK   = %01000000      ' screen blank
    TMSINTEN   = %00100000      ' interrupt enable
    TMSMODE1   = %00010000      ' mode bit 1
    TMSMODE2   = %00001000      ' mode bit 2
    TMSSPRSIZE = %00000010      ' sprite size
    TMSSPRMAG  = %00000001      ' sprite magnification

    TMSVSYNC   = %10000000      ' framce sync

    TMSSPRITES = 32

CON

'============================================================================================= NTSC metrics

ntsc_blank_lev  = 40.0                                  'levels
ntsc_black_lev  = ntsc_blank_lev + 7.5
ntsc_peak_lev   = ntsc_blank_lev + 140.0
ntsc_scale      = 127.0 / ntsc_peak_lev * 128.0
ntsc_scale_cor  = ntsc_scale / 1.646                    'CORDIC prescale for IQ modulator

ntsc_blank      = round(ntsc_scale * 2.0 * ntsc_blank_lev / ntsc_peak_lev)
ntsc_black      = round(ntsc_scale * 2.0 * ntsc_black_lev / ntsc_peak_lev)

ntsc_yr         = round(ntsc_scale     *  0.299)        'Y sums to 1
ntsc_yg         = round(ntsc_scale     *  0.587)
ntsc_yb         = round(ntsc_scale     *  0.114)

ntsc_ir         = round(ntsc_scale_cor *  0.596)        'I sums to 0
ntsc_ig         = round(ntsc_scale_cor * -0.274)
ntsc_ib         = round(ntsc_scale_cor * -0.322)

ntsc_qr         = round(ntsc_scale_cor *  0.212)        'Q sums to 0
ntsc_qg         = round(ntsc_scale_cor * -0.523)
ntsc_qb         = round(ntsc_scale_cor *  0.311)

ntsc_cy         = (ntsc_yr & $FF) << 24 + (ntsc_yg & $FF) << 16 + (ntsc_yb & $FF) << 8 + ntsc_black
ntsc_ci         = (ntsc_ir & $FF) << 24 + (ntsc_ig & $FF) << 16 + (ntsc_ib & $FF) << 8 + ntsc_blank
ntsc_cq         = (ntsc_qr & $FF) << 24 + (ntsc_qg & $FF) << 16 + (ntsc_qb & $FF) << 8 + 128

ntsc_cb         = $809000_01                            'colorburst reference color

ntsc_cf         = 3_579_545                             'colorburst frequency
ntsc_cc         = round(227.5 * 4.0)                    'color cycles per line * 4 to preserve fraction

ntsc_bs         =  1_600_000                            'ps before sync
ntsc_ds         =  4_700_000                            'ps during sync
ntsc_bc         =    600_000                            'ps before colorburst
ntsc_dc         =  2_500_000                            'ps during colorburst
ntsc_ac         =  1_500_000                            'ps after colorburst
ntsc_hl         =  2_300_000                            'ps during high vsync
ntsc_ll         = 27_100_000                            'ps during low vsync
ntsc_vs         = 6                                     'vsync pulses
ntsc_dl         = 243                                   'display lines

'============================================================================================= PAL metrics

pal_blank_lev   = 43.0                                  'levels
pal_black_lev   = pal_blank_lev + 0.0
pal_peak_lev    = pal_blank_lev + 140.0
pal_scale       = 127.0 / pal_peak_lev * 128.0
pal_scale_cor   = pal_scale / 1.646                     'CORDIC prescale for IQ modulator

pal_blank       = round(pal_scale * 2.0 * pal_blank_lev / pal_peak_lev)
pal_black       = round(pal_scale * 2.0 * pal_black_lev / pal_peak_lev)

pal_yr          = round(pal_scale     *  0.299)         'Y sums to 1
pal_yg          = round(pal_scale     *  0.587)
pal_yb          = round(pal_scale     *  0.114)

pal_ur          = round(pal_scale_cor * -0.147)         'I sums to 0
pal_ug          = round(pal_scale_cor * -0.289)
pal_ub          = round(pal_scale_cor *  0.436)

pal_vr          = round(pal_scale_cor *  0.615)         'Q sums to 0
pal_vg          = round(pal_scale_cor * -0.515)
pal_vb          = round(pal_scale_cor * -0.100)

pal_cy          = ( pal_yr & $FF) << 24 + ( pal_yg & $FF) << 16 + ( pal_yb & $FF) << 8 + pal_black
pal_ci          = ( pal_ur & $FF) << 24 + ( pal_ug & $FF) << 16 + ( pal_ub & $FF) << 8 + pal_blank
pal_cq          = ( pal_vr & $FF) << 24 + ( pal_vg & $FF) << 16 + ( pal_vb & $FF) << 8 + 128
pal_ca          = (-pal_vr & $FF) << 24 + (-pal_vg & $FF) << 16 + (-pal_vb & $FF) << 8 + 128

pal_cb          = $FFC060_01                            'colorburst reference color

pal_cf          = 4_433_618                             'colorburst frequency
pal_cc          = round(283.75 * 4.0)                   'color cycles per line * 4 to preserve fraction

pal_bs          =  1_500_000                            'ps before sync
pal_ds          =  4_700_000                            'ps during sync
pal_bc          =    900_000                            'ps before colorburst
pal_dc          =  2_300_000                            'ps during colorburst
pal_ac          =  2_600_000                            'ps after colorburst
pal_hl          =  2_350_000                            'ps during high vsync
pal_ll          = 27_300_000                            'ps during low vsync
pal_vs          = 5                                     'vsync pulses
pal_dl          = 288                                   'display lines